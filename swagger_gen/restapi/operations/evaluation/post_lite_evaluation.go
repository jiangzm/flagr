// Code generated by go-swagger; DO NOT EDIT.

package evaluation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostLiteEvaluationHandlerFunc turns a function with the right signature into a post lite evaluation handler
type PostLiteEvaluationHandlerFunc func(PostLiteEvaluationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostLiteEvaluationHandlerFunc) Handle(params PostLiteEvaluationParams) middleware.Responder {
	return fn(params)
}

// PostLiteEvaluationHandler interface for that can handle valid post lite evaluation params
type PostLiteEvaluationHandler interface {
	Handle(PostLiteEvaluationParams) middleware.Responder
}

// NewPostLiteEvaluation creates a new http.Handler for the post lite evaluation operation
func NewPostLiteEvaluation(ctx *middleware.Context, handler PostLiteEvaluationHandler) *PostLiteEvaluation {
	return &PostLiteEvaluation{Context: ctx, Handler: handler}
}

/*PostLiteEvaluation swagger:route POST /evaluation/lite evaluation postLiteEvaluation

PostLiteEvaluation post lite evaluation API

*/
type PostLiteEvaluation struct {
	Context *middleware.Context
	Handler PostLiteEvaluationHandler
}

func (o *PostLiteEvaluation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostLiteEvaluationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
